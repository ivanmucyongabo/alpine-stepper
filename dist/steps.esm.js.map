{"version":3,"file":"steps.esm.js","sources":["../src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Alpine Steps\n * @module alpinejs-steps\n */\n\n/**\n * Class for stepwise UI controller\n *\n * @property {string[]|Object[]} steps - Step items.\n * @property {string} currentStep - The name of the active step item.\n * @property {boolean} circular - If circular indexing is enabled.\n */\nexport class StepsController {\n  /**\n   * Create a controller\n   * @param {string[]|Object[]} model - Step items.\n   * @param {string} model[].name - The name of the step, if an array of Objects.\n   * @param {boolean} circular - Allow circular step indexing.\n   * @param {string} initialStep - The name of the step to start at.\n   */\n  constructor(model = [], circular = false, initialStep) {\n    this.steps = model;\n    this.currentStep = initialStep ? initialStep : model[0].name || model[0];\n    this.circular = circular;\n  }\n\n  /**\n   * Get the length of steps.\n   * @return {number} The length of the steps array.\n   */\n  get length() {\n    return this.steps.length;\n  }\n\n  /**\n   * Get the 1 based index of active step.\n   * @return {number} 1 based index of active step.\n   */\n  get currentStepIndex() {\n    // 1 based\n    return this.currentIndex + 1;\n  }\n\n  /**\n   * Get the 0 based index of active step.\n   * @return {number} 0 based index of active step.\n   */\n  get currentIndex() {\n    // 0 based\n    return this.steps.findIndex((step) => {\n      let name = step.name || step;\n      return name === this.currentStep;\n    });\n  }\n\n  /**\n   * Get the name for the first step item.\n   * @return {string} Name of first step item.\n   */\n  get firstStepName() {\n    const firstNode = this.steps[0];\n\n    return firstNode.name || firstNode;\n  }\n\n  /**\n   * Get the active step item.\n   * @return {string|Object} The active step item.\n   */\n  get currentStepNode() {\n    return this.steps.find(\n      (stepNode) => (stepNode.name || stepNode) === this.currentStep\n    );\n  }\n\n  /**\n   * Validate if step is active by name.\n   * @param {string} name - Name of step to check.\n   * @returns {boolean} If the step is active.\n   */\n  isActive(name) {\n    return this.currentStep === name;\n  }\n\n  /**\n   * Activate step by name.\n   * @param {string} to - Name of step to activate.\n   * @returns {boolean} If the step was activated.\n   */\n  transitionTo(to) {\n    const destination = to.name || to;\n\n    if (destination && destination !== this.currentStep) {\n      return this.activate(destination);\n    }\n\n    return false;\n  }\n\n  /**\n   * Activate the next step.\n   * @returns {boolean} If the next step is activated.\n   */\n  transitionToNext() {\n    const to = this.pickNext();\n\n    return this.transitionTo(to);\n  }\n\n  /**\n   * Activate the previous step.\n   * @returns {boolean} If the previous step is activated.\n   */\n  transitionToPrevious() {\n    const to = this.pickPrevious();\n\n    return this.transitionTo(to);\n  }\n\n  /**\n   * Set current step by name.\n   * @param {string|Object} step\n   * @param {string} step[].name - The name of the step, if an Object.\n   * @returns {boolean} If step is activated, without error.\n   */\n  activate(step) {\n    const name = step.name || step;\n    this.currentStep = name;\n\n    return true;\n  }\n\n  /**\n   * Get the next available step item.\n   * Note: If in circular mode, it will always return a step.\n   * @returns {boolean|string} The next step if available or false.\n   */\n  pickNext() {\n    const currentNode = this.steps[this.incrementIndex()];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the previous available step item.\n   * Note: If in circular mode, it will always return a step.\n   * @returns {boolean|string} The previous step if available or false.\n   */\n  pickPrevious() {\n    const currentNode = this.steps[this.incrementIndex(-1)];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * Increment the index.\n   * Note: If in circular mode, it will always return an in bounds index.\n   * @param {number} increment - The value to increment by.\n   * @returns {number} The index after increment.\n   */\n  incrementIndex(increment = 1) {\n    let l = this.length;\n    let i = this.currentIndex + increment;\n\n    if (this.circular) {\n      i = ((i % l) + l) % l;\n    }\n\n    return i;\n  }\n\n  /**\n   * Get the 1 based index of the step by name.\n   * @param {string} nameQuery - The name of the step to check.\n   * @returns {number} The index of the step if available.\n   */\n  getIndex(nameQuery) {\n    return (\n      this.steps.findIndex((step) => {\n        let name = step.name || step;\n        return name === nameQuery;\n      }) + 1\n    );\n  }\n\n  /**\n   * Required by Alpine for automatic execution.\n   */\n  init() {}\n}\n\n/**\n * @typedef {Object} StepsComponentData\n * @property {string[]|Object[]} steps - Step items.\n * @property {string} currentStep - The name of the active step item.\n * @property {boolean} circular - If circular indexing is enabled.\n * @property {number} length - The length of the steps items.\n * @property {number} currentStepIndex - 1 based index of active step.\n * @property {number} currentIndex - 0 based index of active step.\n * @property {string} firstStepName - Name of first step item.\n * @property {string|Object} currentStepNode - The active step item.\n * @method isActive - Validate if step is active by name.\n * @method transitionTo - Activate step by name.\n * @method transitionToNext - Activate the next step.\n * @method transitionToPrevious - Activate the previous step.\n * @method activate - Set current step by name.\n * @method pickNext - Get the next available step item.\n * @method pickPrevious - Get the previous available step item.\n * @method incrementIndex - Increment the index.\n * @method getIndex - Get the 1 based index of the step by name.\n * @method init - Required by Alpine for automatic execution.\n */\n\n/**\n * Callback function for building a step component.\n *\n * Usage Examples {@tutorial usage-tutorial}\n *\n * @param {string[]|Object[]} model - Step items.\n * @param {boolean} circular - Allow circular step indexing.\n * @param {string} initialStep - Name of step to start with.\n * @returns {StepsComponentData}\n */\nexport const StepsComponent = (model = [], circular = false, initialStep) => ({\n  steps: model,\n  circular: circular,\n  currentStep: initialStep ? initialStep : model[0].name || model[0],\n  get length() {\n    return this.steps.length;\n  },\n  get currentStepIndex() {\n    return this.currentIndex + 1;\n  },\n  get currentIndex() {\n    return this.steps.findIndex((step) => {\n      let name = step.name || step;\n      return name === this.currentStep;\n    });\n  },\n  get firstStepName() {\n    const firstNode = this.steps[0];\n\n    return firstNode.name || firstNode;\n  },\n  get currentStepNode() {\n    return this.steps.find(\n      (stepNode) => (stepNode.name || stepNode) === this.currentStep\n    );\n  },\n  isActive(name) {\n    return this.currentStep === name;\n  },\n  transitionTo(to) {\n    const destination = to.name || to;\n\n    if (destination && destination !== this.currentStep) {\n      this.activate(destination);\n    }\n\n    return false;\n  },\n  transitionToNext() {\n    const to = this.pickNext();\n\n    return this.transitionTo(to);\n  },\n  transitionToPrevious() {\n    const to = this.pickPrevious();\n\n    return this.transitionTo(to);\n  },\n  activate(step) {\n    const name = step.name || step;\n    this.currentStep = name;\n\n    return true;\n  },\n  pickNext() {\n    const currentNode = this.steps[this.incrementIndex()];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  },\n  pickPrevious() {\n    const currentNode = this.steps[this.incrementIndex(-1)];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  },\n  incrementIndex(increment = 1) {\n    let l = this.length;\n    let i = this.currentIndex + increment;\n\n    if (this.circular) {\n      i = ((i % l) + l) % l;\n    }\n\n    return i;\n  },\n  getIndex(nameQuery) {\n    return (\n      this.steps.findIndex((step) => {\n        let name = step.name || step;\n        return name === nameQuery;\n      }) + 1\n    );\n  },\n  init() {},\n});\n"],"names":["StepsController","constructor","model","circular","initialStep","steps","currentStep","name","length","currentStepIndex","currentIndex","findIndex","step","firstStepName","firstNode","currentStepNode","find","stepNode","isActive","transitionTo","to","destination","activate","transitionToNext","pickNext","transitionToPrevious","pickPrevious","currentNode","incrementIndex","increment","l","i","getIndex","nameQuery","init","StepsComponent"],"mappings":";;;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMA,eAAN,CAAsB;AAC3B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,KAAK,GAAG,EAAT,EAAaC,QAAQ,GAAG,KAAxB,EAA+BC,WAA/B,EAA4C;IACrD,IAAKC,CAAAA,KAAL,GAAaH,KAAb,CAAA;AACA,IAAA,IAAA,CAAKI,WAAL,GAAmBF,WAAW,GAAGA,WAAH,GAAiBF,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiBL,KAAK,CAAC,CAAD,CAArE,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACY,EAAA,IAANK,MAAM,GAAG;IACX,OAAO,IAAA,CAAKH,KAAL,CAAWG,MAAlB,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACsB,EAAA,IAAhBC,gBAAgB,GAAG;AACrB;IACA,OAAO,IAAA,CAAKC,YAAL,GAAoB,CAA3B,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACkB,EAAA,IAAZA,YAAY,GAAG;AACjB;AACA,IAAA,OAAO,KAAKL,KAAL,CAAWM,SAAX,CAAsBC,IAAD,IAAU;AACpC,MAAA,IAAIL,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAAxB,CAAA;MACA,OAAOL,IAAI,KAAK,IAAA,CAAKD,WAArB,CAAA;AACD,KAHM,CAAP,CAAA;AAID,GAAA;AAED;AACF;AACA;AACA;;;AACmB,EAAA,IAAbO,aAAa,GAAG;AAClB,IAAA,MAAMC,SAAS,GAAG,IAAA,CAAKT,KAAL,CAAW,CAAX,CAAlB,CAAA;AAEA,IAAA,OAAOS,SAAS,CAACP,IAAV,IAAkBO,SAAzB,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACqB,EAAA,IAAfC,eAAe,GAAG;AACpB,IAAA,OAAO,KAAKV,KAAL,CAAWW,IAAX,CACJC,QAAD,IAAc,CAACA,QAAQ,CAACV,IAAT,IAAiBU,QAAlB,MAAgC,IAAA,CAAKX,WAD9C,CAAP,CAAA;AAGD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACEY,QAAQ,CAACX,IAAD,EAAO;IACb,OAAO,IAAA,CAAKD,WAAL,KAAqBC,IAA5B,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACEY,YAAY,CAACC,EAAD,EAAK;AACf,IAAA,MAAMC,WAAW,GAAGD,EAAE,CAACb,IAAH,IAAWa,EAA/B,CAAA;;AAEA,IAAA,IAAIC,WAAW,IAAIA,WAAW,KAAK,IAAA,CAAKf,WAAxC,EAAqD;AACnD,MAAA,OAAO,IAAKgB,CAAAA,QAAL,CAAcD,WAAd,CAAP,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,gBAAgB,GAAG;AACjB,IAAA,MAAMH,EAAE,GAAG,IAAKI,CAAAA,QAAL,EAAX,CAAA;AAEA,IAAA,OAAO,IAAKL,CAAAA,YAAL,CAAkBC,EAAlB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACEK,EAAAA,oBAAoB,GAAG;AACrB,IAAA,MAAML,EAAE,GAAG,IAAKM,CAAAA,YAAL,EAAX,CAAA;AAEA,IAAA,OAAO,IAAKP,CAAAA,YAAL,CAAkBC,EAAlB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,QAAQ,CAACV,IAAD,EAAO;AACb,IAAA,MAAML,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAA1B,CAAA;IACA,IAAKN,CAAAA,WAAL,GAAmBC,IAAnB,CAAA;AAEA,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACEiB,EAAAA,QAAQ,GAAG;IACT,MAAMG,WAAW,GAAG,IAAKtB,CAAAA,KAAL,CAAW,IAAKuB,CAAAA,cAAL,EAAX,CAApB,CAAA;;AAEA,IAAA,IAAID,WAAJ,EAAiB;AACf,MAAA,OAAOA,WAAW,CAACpB,IAAZ,IAAoBoB,WAA3B,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACED,EAAAA,YAAY,GAAG;IACb,MAAMC,WAAW,GAAG,IAAA,CAAKtB,KAAL,CAAW,IAAKuB,CAAAA,cAAL,CAAoB,CAAC,CAArB,CAAX,CAApB,CAAA;;AAEA,IAAA,IAAID,WAAJ,EAAiB;AACf,MAAA,OAAOA,WAAW,CAACpB,IAAZ,IAAoBoB,WAA3B,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,CAACC,SAAS,GAAG,CAAb,EAAgB;IAC5B,IAAIC,CAAC,GAAG,IAAA,CAAKtB,MAAb,CAAA;AACA,IAAA,IAAIuB,CAAC,GAAG,IAAKrB,CAAAA,YAAL,GAAoBmB,SAA5B,CAAA;;IAEA,IAAI,IAAA,CAAK1B,QAAT,EAAmB;MACjB4B,CAAC,GAAG,CAAEA,CAAC,GAAGD,CAAL,GAAUA,CAAX,IAAgBA,CAApB,CAAA;AACD,KAAA;;AAED,IAAA,OAAOC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACEC,QAAQ,CAACC,SAAD,EAAY;AAClB,IAAA,OACE,KAAK5B,KAAL,CAAWM,SAAX,CAAsBC,IAAD,IAAU;AAC7B,MAAA,IAAIL,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAAxB,CAAA;MACA,OAAOL,IAAI,KAAK0B,SAAhB,CAAA;AACD,KAHD,IAGK,CAJP,CAAA;AAMD,GAAA;AAED;AACF;AACA;;;AACEC,EAAAA,IAAI,GAAG,EAAE;;AAxLkB,CAAA;AA2L7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,cAAc,GAAG,CAACjC,KAAK,GAAG,EAAT,EAAaC,QAAQ,GAAG,KAAxB,EAA+BC,WAA/B,MAAgD;AAC5EC,EAAAA,KAAK,EAAEH,KADqE;AAE5EC,EAAAA,QAAQ,EAAEA,QAFkE;AAG5EG,EAAAA,WAAW,EAAEF,WAAW,GAAGA,WAAH,GAAiBF,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiBL,KAAK,CAAC,CAAD,CAHa;;AAI5E,EAAA,IAAIM,MAAJ,GAAa;IACX,OAAO,IAAA,CAAKH,KAAL,CAAWG,MAAlB,CAAA;GAL0E;;AAO5E,EAAA,IAAIC,gBAAJ,GAAuB;IACrB,OAAO,IAAA,CAAKC,YAAL,GAAoB,CAA3B,CAAA;GAR0E;;AAU5E,EAAA,IAAIA,YAAJ,GAAmB;AACjB,IAAA,OAAO,KAAKL,KAAL,CAAWM,SAAX,CAAsBC,IAAD,IAAU;AACpC,MAAA,IAAIL,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAAxB,CAAA;MACA,OAAOL,IAAI,KAAK,IAAA,CAAKD,WAArB,CAAA;AACD,KAHM,CAAP,CAAA;GAX0E;;AAgB5E,EAAA,IAAIO,aAAJ,GAAoB;AAClB,IAAA,MAAMC,SAAS,GAAG,IAAA,CAAKT,KAAL,CAAW,CAAX,CAAlB,CAAA;AAEA,IAAA,OAAOS,SAAS,CAACP,IAAV,IAAkBO,SAAzB,CAAA;GAnB0E;;AAqB5E,EAAA,IAAIC,eAAJ,GAAsB;AACpB,IAAA,OAAO,KAAKV,KAAL,CAAWW,IAAX,CACJC,QAAD,IAAc,CAACA,QAAQ,CAACV,IAAT,IAAiBU,QAAlB,MAAgC,IAAA,CAAKX,WAD9C,CAAP,CAAA;GAtB0E;;EA0B5EY,QAAQ,CAACX,IAAD,EAAO;IACb,OAAO,IAAA,CAAKD,WAAL,KAAqBC,IAA5B,CAAA;GA3B0E;;EA6B5EY,YAAY,CAACC,EAAD,EAAK;AACf,IAAA,MAAMC,WAAW,GAAGD,EAAE,CAACb,IAAH,IAAWa,EAA/B,CAAA;;AAEA,IAAA,IAAIC,WAAW,IAAIA,WAAW,KAAK,IAAA,CAAKf,WAAxC,EAAqD;MACnD,IAAKgB,CAAAA,QAAL,CAAcD,WAAd,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;GApC0E;;AAsC5EE,EAAAA,gBAAgB,GAAG;AACjB,IAAA,MAAMH,EAAE,GAAG,IAAKI,CAAAA,QAAL,EAAX,CAAA;AAEA,IAAA,OAAO,IAAKL,CAAAA,YAAL,CAAkBC,EAAlB,CAAP,CAAA;GAzC0E;;AA2C5EK,EAAAA,oBAAoB,GAAG;AACrB,IAAA,MAAML,EAAE,GAAG,IAAKM,CAAAA,YAAL,EAAX,CAAA;AAEA,IAAA,OAAO,IAAKP,CAAAA,YAAL,CAAkBC,EAAlB,CAAP,CAAA;GA9C0E;;EAgD5EE,QAAQ,CAACV,IAAD,EAAO;AACb,IAAA,MAAML,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAA1B,CAAA;IACA,IAAKN,CAAAA,WAAL,GAAmBC,IAAnB,CAAA;AAEA,IAAA,OAAO,IAAP,CAAA;GApD0E;;AAsD5EiB,EAAAA,QAAQ,GAAG;IACT,MAAMG,WAAW,GAAG,IAAKtB,CAAAA,KAAL,CAAW,IAAKuB,CAAAA,cAAL,EAAX,CAApB,CAAA;;AAEA,IAAA,IAAID,WAAJ,EAAiB;AACf,MAAA,OAAOA,WAAW,CAACpB,IAAZ,IAAoBoB,WAA3B,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;GA7D0E;;AA+D5ED,EAAAA,YAAY,GAAG;IACb,MAAMC,WAAW,GAAG,IAAA,CAAKtB,KAAL,CAAW,IAAKuB,CAAAA,cAAL,CAAoB,CAAC,CAArB,CAAX,CAApB,CAAA;;AAEA,IAAA,IAAID,WAAJ,EAAiB;AACf,MAAA,OAAOA,WAAW,CAACpB,IAAZ,IAAoBoB,WAA3B,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;GAtE0E;;AAwE5EC,EAAAA,cAAc,CAACC,SAAS,GAAG,CAAb,EAAgB;IAC5B,IAAIC,CAAC,GAAG,IAAA,CAAKtB,MAAb,CAAA;AACA,IAAA,IAAIuB,CAAC,GAAG,IAAKrB,CAAAA,YAAL,GAAoBmB,SAA5B,CAAA;;IAEA,IAAI,IAAA,CAAK1B,QAAT,EAAmB;MACjB4B,CAAC,GAAG,CAAEA,CAAC,GAAGD,CAAL,GAAUA,CAAX,IAAgBA,CAApB,CAAA;AACD,KAAA;;AAED,IAAA,OAAOC,CAAP,CAAA;GAhF0E;;EAkF5EC,QAAQ,CAACC,SAAD,EAAY;AAClB,IAAA,OACE,KAAK5B,KAAL,CAAWM,SAAX,CAAsBC,IAAD,IAAU;AAC7B,MAAA,IAAIL,IAAI,GAAGK,IAAI,CAACL,IAAL,IAAaK,IAAxB,CAAA;MACA,OAAOL,IAAI,KAAK0B,SAAhB,CAAA;AACD,KAHD,IAGK,CAJP,CAAA;GAnF0E;;AA0F5EC,EAAAA,IAAI,GAAG,EAAE;;AA1FmE,CAAhD;;;;"}