{"version":3,"file":"steps.esm.min.js","sources":["../src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * A controller for stepwise UI components.\n * @module AlpineSteps\n */\n\n/**\n * Class for stepwise UI controller\n *\n * @property {string[]|Object[]} steps - Step items.\n * @property {string} currentStep - The name of the active step item.\n * @property {boolean} circular - If circular indexing is enabled.\n */\nexport class StepsController {\n  /**\n   * Create a controller\n   * @param {string[]|Object[]} model - Step items.\n   * @param {string} model[].name - The name of the step, if an array of Objects.\n   * @param {boolean} circular - Allow circular step indexing.\n   * @param {string} initialStep - The name of the step to start at.\n   */\n  constructor(model = [], circular = false, initialStep) {\n    this.steps = model;\n    this.currentStep = initialStep ? initialStep : model[0].name || model[0];\n    this.circular = circular;\n  }\n\n  /**\n   * Get the length of steps.\n   * @return {number} The length of the steps array.\n   */\n  get length() {\n    return this.steps.length;\n  }\n\n  /**\n   * Get the 1 based index of active step.\n   * @return {number} 1 based index of active step.\n   */\n  get currentStepIndex() {\n    // 1 based\n    return this.currentIndex + 1;\n  }\n\n  /**\n   * Get the 0 based index of active step.\n   * @return {number} 0 based index of active step.\n   */\n  get currentIndex() {\n    // 0 based\n    return this.steps.findIndex((step) => {\n      let name = step.name || step;\n      return name === this.currentStep;\n    });\n  }\n\n  /**\n   * Get the name for the first step item.\n   * @return {string} Name of first step item.\n   */\n  get firstStepName() {\n    const firstNode = this.steps[0];\n\n    return firstNode.name || firstNode;\n  }\n\n  /**\n   * Get the active step item.\n   * @return {string|Object} The active step item.\n   */\n  get currentStepNode() {\n    return this.steps.find(\n      (stepNode) => (stepNode.name || stepNode) === this.currentStep\n    );\n  }\n\n  /**\n   * Validate if step is active by name.\n   * @param {string} name - Name of step to check.\n   * @returns {boolean} If the step is active.\n   */\n  isActive(name) {\n    return this.currentStep === name;\n  }\n\n  /**\n   * Activate step by name.\n   * @param {string} to - Name of step to activate.\n   * @returns {boolean} If the step was activated.\n   */\n  transitionTo(to) {\n    const destination = to.name || to;\n\n    if (destination && destination !== this.currentStep) {\n      return this.activate(destination);\n    }\n\n    return false;\n  }\n\n  /**\n   * Activate the next step.\n   * @returns {boolean} If the next step is activated.\n   */\n  transitionToNext() {\n    const to = this.pickNext();\n\n    return this.transitionTo(to);\n  }\n\n  /**\n   * Activate the previous step.\n   * @returns {boolean} If the previous step is activated.\n   */\n  transitionToPrevious() {\n    const to = this.pickPrevious();\n\n    return this.transitionTo(to);\n  }\n\n  /**\n   * Set current step by name.\n   * @param {string|Object} step\n   * @param {string} step[].name - The name of the step, if an Object.\n   * @returns {boolean} If step is activated, without error.\n   */\n  activate(step) {\n    const name = step.name || step;\n    this.currentStep = name;\n\n    return true;\n  }\n\n  /**\n   * Get the next available step item.\n   * Note: If in circular mode, it will always return a step.\n   * @returns {boolean|string} The next step if available or false.\n   */\n  pickNext() {\n    const currentNode = this.steps[this.incrementIndex()];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the previous available step item.\n   * Note: If in circular mode, it will always return a step.\n   * @returns {boolean|string} The previous step if available or false.\n   */\n  pickPrevious() {\n    const currentNode = this.steps[this.incrementIndex(-1)];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * Increment the index.\n   * Note: If in circular mode, it will always return an in bounds index.\n   * @param {number} increment - The value to increment by.\n   * @returns {number} The index after increment.\n   */\n  incrementIndex(increment = 1) {\n    let l = this.length;\n    let i = this.currentIndex + increment;\n\n    if (this.circular) {\n      i = ((i % l) + l) % l;\n    }\n\n    return i;\n  }\n\n  /**\n   * Get the 1 based index of the step by name.\n   * @param {string} nameQuery - The name of the step to check.\n   * @returns {number} The index of the step if available.\n   */\n  getIndex(nameQuery) {\n    return (\n      this.steps.findIndex((step) => {\n        let name = step.name || step;\n        return name === nameQuery;\n      }) + 1\n    );\n  }\n\n  /**\n   * Required by Alpine for automatic execution.\n   */\n  init() {}\n}\n\n/**\n * StepsController as a plain js object.\n * \n * @typedef {Object} StepsControllerObject\n * @property {string[]|Object[]} steps - Step items.\n * @property {string} currentStep - The name of the active step item.\n * @property {boolean} circular - If circular indexing is enabled.\n * @property {number} length - The length of the steps items.\n * @property {number} currentStepIndex - 1 based index of active step.\n * @property {number} currentIndex - 0 based index of active step.\n * @property {string} firstStepName - Name of first step item.\n * @property {string|Object} currentStepNode - The active step item.\n * @property {function(string=):boolean} isActive - Validate if step is active by name.\n * @property {function(string=):boolean} transitionTo - Activate step by name.\n * @property {function():boolean} transitionToNext - Activate the next step.\n * @property {function():boolean} transitionToPrevious - Activate the previous step.\n * @property {function(string=):boolean} activate - Set current step by name.\n * @property {function():boolean|string} pickNext - Get the next available step item.\n * @property {function():boolean|string} pickPrevious - Get the previous available step item.\n * @property {function(number=):number} incrementIndex - Increment the index.\n * @property {function(string=):number} getIndex - Get the 1 based index of the step by name.\n * @property {function():void} init - Required by Alpine for automatic execution.\n */\nvar StepsControllerObject;\n\n/**\n * Callback function for building a steps controller as a plain js object.\n *\n * [Usage Example]{@tutorial basic_usage.html}\n *\n * @function StepsComponent\n * @param {string[]|Object[]} model - Step items.\n * @param {boolean} circular - Allow circular step indexing.\n * @param {string} initialStep - Name of step to start with.\n * @returns {StepsControllerObject} A {@link StepsControllerObject} object\n */\nexport const StepsComponent = (model = [], circular = false, initialStep) => ({\n  steps: model,\n  circular: circular,\n  currentStep: initialStep ? initialStep : model[0].name || model[0],\n  get length() {\n    return this.steps.length;\n  },\n  get currentStepIndex() {\n    return this.currentIndex + 1;\n  },\n  get currentIndex() {\n    return this.steps.findIndex((step) => {\n      let name = step.name || step;\n      return name === this.currentStep;\n    });\n  },\n  get firstStepName() {\n    const firstNode = this.steps[0];\n\n    return firstNode.name || firstNode;\n  },\n  get currentStepNode() {\n    return this.steps.find(\n      (stepNode) => (stepNode.name || stepNode) === this.currentStep\n    );\n  },\n  isActive(name) {\n    return this.currentStep === name;\n  },\n  transitionTo(to) {\n    const destination = to.name || to;\n\n    if (destination && destination !== this.currentStep) {\n      this.activate(destination);\n    }\n\n    return false;\n  },\n  transitionToNext() {\n    const to = this.pickNext();\n\n    return this.transitionTo(to);\n  },\n  transitionToPrevious() {\n    const to = this.pickPrevious();\n\n    return this.transitionTo(to);\n  },\n  activate(step) {\n    const name = step.name || step;\n\n    if (this.getIndex(name) <= 0) {\n      return false;\n    }\n\n    this.currentStep = name;\n\n    return true;\n  },\n  pickNext() {\n    const currentNode = this.steps[this.incrementIndex()];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  },\n  pickPrevious() {\n    const currentNode = this.steps[this.incrementIndex(-1)];\n\n    if (currentNode) {\n      return currentNode.name || currentNode;\n    }\n\n    return false;\n  },\n  incrementIndex(increment = 1) {\n    let l = this.length;\n    let i = this.currentIndex + increment;\n\n    if (this.circular) {\n      i = ((i % l) + l) % l;\n    }\n\n    return i;\n  },\n  getIndex(nameQuery) {\n    return (\n      this.steps.findIndex((step) => {\n        let name = step.name || step;\n        return name === nameQuery;\n      }) + 1\n    );\n  },\n  init() {},\n});"],"names":["StepsController","constructor","model","circular","initialStep","this","steps","currentStep","name","length","currentStepIndex","currentIndex","findIndex","step","firstStepName","firstNode","currentStepNode","find","stepNode","isActive","transitionTo","to","destination","activate","transitionToNext","pickNext","transitionToPrevious","pickPrevious","currentNode","incrementIndex","increment","l","i","getIndex","nameQuery","init","StepsComponent"],"mappings":"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"}